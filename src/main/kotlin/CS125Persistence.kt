
import java.nio.file.Files
import java.nio.file.Path
import java.text.SimpleDateFormat
import java.util.*
import kotlin.collections.ArrayList


class CS125Persistence {

    private fun convertStringToDate(dateStr: String):Date {
        val format = SimpleDateFormat("yyyy-dd-MM HH:mm:ss", Locale.ENGLISH)
        return format.parse(dateStr)
    }

    /**
     * Returns the date of a log line
     */
    private fun extractDateFromLog(line: String): Date {
        var dateStr = line.split(",")[0]
        return convertStringToDate(dateStr)
    }


    /**
     * Scrapes idea.log file for all Activity Logs generated by this plugin.
     * Return a list of all activitySessionLogs that haven't been posted to the server yet.
     */
    fun getNewLogsFromLogFile(logFile: Path, lastDateScraped: Date): ArrayList<String> {
        val logList = String(Files.readAllBytes(logFile)).split("\n")

        // Reverse logList
        var logListReversed = logList.subList(0, logList.size)
        Collections.reverse(logListReversed)

        // Iterate through activitySessionLogs until finding a date that's already been scraped, accumulating activitySessionLogs as we go.
        var unpostedLogs = ArrayList<String>()
        for (line in logListReversed) {
            if (extractDateFromLog(line).after(lastDateScraped) && line.contains("edu.illinois.cs.cs125")) {
                unpostedLogs.add(line)
            } else {
                break
            }
        }

        // Reverse activitySessionLogs again to return them to chronological order.
        unpostedLogs.reverse()
        return unpostedLogs
    }
}